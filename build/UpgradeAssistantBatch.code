.version sol 0.57.1

.macro constructor
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
GETGLOB 6
THROWIF 51
OVER
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDU 256
LDMSGADDR
ENDS
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 44
GETGLOB 9
GETGLOB 10
SDEQ
THROWIFNOT 100
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 46
SWAP
SETGLOB 14
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 47
SETGLOB 15
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro addWallets
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 50
LDU 32
LDDICT
ROTREV
PAIR
SWAP
ENDS
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0
CALLREF {
	CALL $addWallets_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro addWallets_internal_macro
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 35
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 14
EQUAL
THROWIFNOT 100
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 51
ACCEPT
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 53
SECOND
PUSHINT 0
NULL
PUSHCONT {
	PUSH2 S1, S2
	PUSHINT 32
	DICTUGET
	NULLSWAPIFNOT
	DROP
	DUP
	POP S2
	ISNULL
	NOT
}
PUSHCONT {
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 54
	DUP
	GETGLOB 12
	UNPAIR
	OVER
	INC
	ROLLREV 3
	PUSHINT 32
	DICTUSET
	PAIR
	SETGLOB 12
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0
	OVER
	INC
	POP S2
}
WHILE
BLKDROP 3
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0

.globl	_getWalletsPack_internal
.type	_getWalletsPack_internal, @function
CALL $_getWalletsPack_internal_macro$

.macro _getWalletsPack_internal_macro
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 58
PUSHINT 0
NEWDICT
PAIR
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 59
PUSHCONT {
	GETGLOB 13
	GETGLOB 12
	FIRST
	LESS
	OVER
	FIRST
	LESSINT 50
	AND
}
PUSHCONT {
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 60
	GETGLOB 13
	GETGLOB 12
	SECOND
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	SWAP
	UNPAIR
	OVER
	INC
	ROLLREV 3
	PUSHINT 32
	DICTUSET
	PAIR
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 61
	GETGLOB 13
	INC
	SETGLOB 13
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0
}
WHILE
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0

.macro upgrade
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 67
ENDS
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0
CALLREF {
	CALL $upgrade_internal_macro$
}
DROP
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro upgrade_internal_macro
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 23
GETGLOB 9
GETGLOB 10
SDEQ
GETGLOB 9
MYADDR
SDEQ
OR
THROWIFNOT 100
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 69
CALLREF {
	CALL $_upgrade_internal_macro$
}
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0

.globl	_upgrade_internal
.type	_upgrade_internal, @function
CALL $_upgrade_internal_macro$

.macro _upgrade_internal_macro
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 73
PUSHINT 0
PUSHCONT {
	DUP
	LESSINT 5
}
PUSHCONT {
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 74
	CALLREF {
		CALL $_getWalletsPack_internal_macro$
	}
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 76
	DUP
	FIRST
	UFITS 128
	PUSHINT 100000000
	MUL
	UFITS 128
	PUSHINT 1000000000
	ADD
	UFITS 128
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 78
	OVER
	FIRST
	GTINT 0
	PUSHCONT {
		.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 79
		OVER
		GETGLOB 11
		PUSH S2
		GETGLOB 10
		TRUE
		NEWC
		STSLICECONST x6_
		STI 1
		PUSHINT 3
		STZEROES
		STSLICE
		SWAP
		STGRAMS
		PUSHSLICE x0000000000000000000000000004f0840bf_
		STSLICER
		STU 32
		SWAP
		UNPAIR
		XCHG S2
		STU 32
		STDICT
		ENDC
		PUSHINT 0
		SENDRAWMSG
		.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0
	}
	PUSHCONT {
		.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 85
		DROP2
		RETALT
		.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0
	}
	IFELSE
	DROP2
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 73
	INC
	UFITS 8
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0
}
WHILEBRK
DROP
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 89
GETGLOB 13
GETGLOB 12
FIRST
LESS
PUSHCONT {
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 90
	MYADDR
	FALSE
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	PUSHSLICE x000000000000000000000000000011e6c3e9_
	STSLICER
	ENDC
	PUSHINT 128
}
PUSHCONT {
	.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 96
	GETGLOB 11
	GETGLOB 10
	FALSE
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	PUSHSLICE x00000000000000000000000000003085de8f_
	STSLICER
	STU 32
	ENDC
	PUSHINT 128
	ADDCONST 32
	UFITS 8
}
IFELSE
SENDRAWMSG
.loc ../contracts/upgrade-assistant/UpgradeAssistantBatch.tsol, 0

.macro c4_to_c7
PUSHROOT
CTOS
LDU 256 ; pubkey c4
LDU 64 ; pubkey timestamp c4
LDU 1 ; ctor flag
NIP
LDMSGADDR
LDU 32
LDU 32
LDDICT
ROTREV
PAIR
SWAP
LDREF
ENDS
CTOS
LDU 256
LDU 256
LDREF
ENDS
CTOS
LDMSGADDR
ENDS
SETGLOB 15
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
SETGLOB 3
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS
SBITS
GTINT 1
PUSHCONT {
	PUSHINT 0
	PUSHROOT
	CTOS
	PLDDICT ; D
	PUSHINT 1
	OVER
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHREFSLICE {
			.blob x8000000000000000000000000000000000000000000000000000000000000000001_
		}
	}
	IFNOT
	PUSHINT 2
	PUSH S2
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 32
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	PUSHINT 0
	NEWDICT
	PAIR
	PUSHINT 0
	DUP
	PUSHREFSLICE {
		.blob x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	SETGLOB 15
	SETGLOB 14
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
}
IFREFELSE {
	CALL $c4_to_c7$
}

.macro c7_to_c4
GETGLOB 15
GETGLOB 14
GETGLOB 13
GETGLOB 12
GETGLOB 11
GETGLOB 10
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STONE
STSLICE
STU 32
SWAP
UNPAIR
XCHG S2
STU 32
STDICT
ROLLREV 3
NEWC
STU 256
STU 256
SWAP
NEWC
STSLICE
STBREFR
STBREFR
ENDC
POPROOT

.macro upd_only_time_in_c4
PUSHROOT
CTOS
LDU 256
LDU 64
NIP
GETGLOB 3
ROT
NEWC
STU 256
STU 64
STSLICE
ENDC
POPROOT

.internal-alias :main_internal, 0
.internal :main_internal
PUSHROOT
CTOS
SBITS
NEQINT 1
SETGLOB 6
PUSH S2
CTOS
LDU 4 ; bounced tail
LDMSGADDR ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
OVER
SEMPTY ; isEmpty
IFJMPREF {
	GETGLOB 6
	THROWIFNOT 76
}
OVER
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60
OVER
IFNOTJMPREF {
	GETGLOB 6
	THROWIFNOT 76
}
SWAP
CALLREF {
	CALL $public_function_selector$
}
THROW 60

.internal-alias :main_external, -1
.internal :main_external
PUSHROOT
CTOS
SBITS
NEQINT 1
SETGLOB 6
PUSHREFSLICE {
	.blob x8000000000000000000000000000000000000000000000000000000000000000001_
}
SETGLOB 9
OVER
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP
	HASHSU ; signatureSlice msgSlice hashMsgSlice
	SWAP
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP
	PUSHCONT {
		LDU 256 ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG S3
		SWAP
	}
	PUSHCONT {
		XCHG S2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU ; msgSlice isSigned
	THROWIFNOT 40
}
PUSHCONT {
	LDU 1 ; havePubkey msgSlice
	SWAP
	THROWIF 58
}
IFELSE
LDU 64 ; timestamp msgSlice
SWAP
CALL $replay_protection_macro$
LDU 32 ; funcId body
SWAP
CALLREF {
	CALL $public_function_selector$
}
THROW 60

.macro wallets
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
OVER
PUSHCONT {
	PUSHSLICE xc00000000000000000000000009210ce5b
	NEWC
	STSLICE
	SWAP
	UNPAIR
	XCHG S2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro wallets_pointer
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
OVER
PUSHCONT {
	PUSHSLICE xc000000000000000000000000084167f90
	NEWC
	STSLICE
	STU 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro worker
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 14
OVER
PUSHCONT {
	PUSHSLICE xc000000000000000000000000093947857
	NEWC
	STSLICE
	STU 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro owner
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 15
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000df0bcfde
	NEWC
	STSLICE
	STSLICE
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro public_function_selector
DUP
PUSHINT 303091291
LEQ
IFJMPREF {
	DUP
	PUSHINT 30752029
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 68583312
	EQUAL
	IFJMPREF {
		CALL $wallets_pointer$
	}
	DUP
	PUSHINT 150168052
	EQUAL
	IFJMPREF {
		CALL $upgrade$
	}
	DUP
	PUSHINT 303091291
	EQUAL
	IFJMPREF {
		CALL $wallets$
	}
}
DUP
PUSHINT 1594609630
LEQ
IFJMPREF {
	DUP
	PUSHINT 328497239
	EQUAL
	IFJMPREF {
		CALL $worker$
	}
	DUP
	PUSHINT 1534670941
	EQUAL
	IFJMPREF {
		CALL $addWallets$
	}
	DUP
	PUSHINT 1594609630
	EQUAL
	IFJMPREF {
		CALL $owner$
	}
}

