.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode sources
LDU 32
LDDICT
ROTREV
PAIR
SWAP
; Decode destinations
LDU 32
LDDICT
ROTREV
PAIR
SWAP
; Decode owner_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: sources
;; param: destinations
;; param: owner_
; constructor Tunnels
PUSHSLICE x54756e6e656c3a2057726f6e67206465706c6f79206b6579
NEWC
STSLICE
ENDC
GETGLOB 2
;; ==
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
EQUAL
THROWARGIFNOT 101
PUSHSLICE x54756e6e656c3a20736f7572636520616e642064657374696e6174696f6e732073697a6520646966666572656e74
NEWC
STSLICE
ENDC
;; get member length
;; push identifier sources
PUSH S3
INDEX 0
;; ==
;; get member length
;; push identifier destinations
PUSH S3
INDEX 0
EQUAL
THROWARGIFNOT 101
ACCEPT
;; push identifier owner_
DUP
CALLREF {
	CALL $_transferOwnership_internal_macro$
}
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; <
	;; get member length
	;; push identifier sources
	PUSH S4
	INDEX 0
	LESS
}
PUSHCONT {
	; expValue
	;; fetch tunnels
	GETGLOB 13
	;; index
	;; push identifier i
	PUSH S1
	;; push identifier sources
	PUSH S5
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	SWAP
	; end expValue
	;; index
	;; push identifier i
	PUSH S2
	;; push identifier destinations
	PUSH S5
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	; colValue
	ROTREV
	PUSHINT 267
	DICTSET
	SETGLOB 13
	; end colValue
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; end constructor Tunnels
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro fallback_macro
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; modifier onlySource
;; get member sender
GETGLOB 9
PUSHSLICE x54756e6e656c3a204e6f7420736f75726365
NEWC
STSLICE
ENDC
;; map.exists
;; push identifier source
PUSH S1
;; push identifier tunnels
GETGLOB 13
PUSHINT 267
DICTGET
DUP
PUSHCONT {
	NIP
}
IF
THROWARGIFNOT 101
; function fallback
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
NEWC
;; decl: payload
; expValue
DUP
; end expValue
;; get member data
DEPTH
PUSHINT 4
SUB
PICK
STSLICER
; colValue
NIP
; end colValue
;; transfer()
;; index
;; get member sender
GETGLOB 9
;; push identifier tunnels
GETGLOB 13
PUSHINT 267
DICTGET
PUSHCONT {
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
}
IFNOT
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
;; push identifier payload
PUSH S1
ENDC
STREFR
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function fallback
DROP
; end modifier onlySource
IFREF {
	CALL $c7_to_c4$
}

.macro __getTunnels
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $__getTunnels_internal_macro$
}
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x869c0210
	PUSH S2
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S1
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	__getTunnels_internal
.type	__getTunnels_internal, @function
CALL $__getTunnels_internal_macro$

.macro __getTunnels_internal_macro
;; ret param: sources
PUSHINT 0
NEWDICT
PAIR
;; ret param: destinations
PUSHINT 0
NEWDICT
PAIR
; function __getTunnels
;; push identifier tunnels
GETGLOB 13
DUP
PUSHINT 267
DICTMIN
NULLSWAPIFNOT
PUSHCONT {
	SWAP
	TUPLE 2
}
IF
DUP
ISNULL
PUSHCONT {
	NULL
	NULL
}
PUSHCONT {
	UNTUPLE 2
	PUSH S1
}
IFELSE
PUSHCONT {
	DUP
	ISNULL
	NOT
}
PUSHCONT {
	; expValue
	PUSH S5
	; end expValue
	;; push identifier source
	PUSH S3
	;; array.push(..)
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSET
	PAIR
	; colValue
	POP S6
	; end colValue
	; expValue
	PUSH S4
	; end expValue
	;; push identifier destination
	PUSH S2
	;; array.push(..)
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSET
	PAIR
	; colValue
	POP S5
	; end colValue
	DUP
	PUSH S4
	PUSHINT 267
	DICTGETNEXT
	NULLSWAPIFNOT
	PUSHCONT {
		SWAP
		TUPLE 2
	}
	IF
	DUP
	ISNULL
	PUSHCONT {
		POP S1
	}
	PUSHCONT {
		UNTUPLE 2
		POP S3
		DUP
		POP S4
		POP S1
	}
	IFELSE
}
WHILE
BLKDROP 4
; end for
; end function __getTunnels

.macro __updateTunnel
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode source
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode destination
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: source
;; param: destination
CALLREF {
	CALL $__updateTunnel_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	__updateTunnel_internal
.type	__updateTunnel_internal, @function
CALL $__updateTunnel_internal_macro$

.macro __updateTunnel_internal_macro
;; param: source
;; param: destination
; modifier onlyOwner
;; get member sender
GETGLOB 9
PUSHSLICE x4f776e61626c653a206e6f74206f776e6572
NEWC
STSLICE
ENDC
;; push identifier owner
GETGLOB 10
;; push identifier addr
PUSH S2
SDEQ
THROWARGIFNOT 123
; function __updateTunnel
; expValue
;; fetch tunnels
GETGLOB 13
;; push identifier source
PUSH S3
SWAP
; end expValue
;; push identifier destination
PUSH S3
; colValue
ROTREV
PUSHINT 267
DICTSET
SETGLOB 13
; end colValue
; end function __updateTunnel
DROP
; end modifier onlyOwner
DROP2

.macro __removeTunnel
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode source
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: source
CALLREF {
	CALL $__removeTunnel_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	__removeTunnel_internal
.type	__removeTunnel_internal, @function
CALL $__removeTunnel_internal_macro$

.macro __removeTunnel_internal_macro
;; param: source
; modifier onlyOwner
;; get member sender
GETGLOB 9
PUSHSLICE x4f776e61626c653a206e6f74206f776e6572
NEWC
STSLICE
ENDC
;; push identifier owner
GETGLOB 10
;; push identifier addr
PUSH S2
SDEQ
THROWARGIFNOT 123
; function __removeTunnel
;; delete
; expValue
;; fetch tunnels
GETGLOB 13
;; push identifier source
PUSH S2
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 267
DICTDEL
DROP
; colValue
NIP
SETGLOB 13
; end colValue
; end function __removeTunnel
DROP
; end modifier onlyOwner
DROP

.macro pause
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $pause_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	pause_internal
.type	pause_internal, @function
CALL $pause_internal_macro$

.macro pause_internal_macro
; modifier onlyOwner
;; get member sender
GETGLOB 9
PUSHSLICE x4f776e61626c653a206e6f74206f776e6572
NEWC
STSLICE
ENDC
;; push identifier owner
GETGLOB 10
;; push identifier addr
PUSH S2
SDEQ
THROWARGIFNOT 123
; modifier whenNotPaused
PUSHSLICE x5061757361626c653a206e6f7420756e706175736564
NEWC
STSLICE
ENDC
;; !
;; push identifier paused
GETGLOB 11
NOT
THROWARGIFNOT 101
; function pause
; expValue
; end expValue
TRUE
; colValue
SETGLOB 11
; end colValue
;; emit Pause
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1a441a60
ENDC
PUSHINT 0
SENDRAWMSG
; end function pause
; end modifier whenNotPaused
DROP
; end modifier onlyOwner

.macro unpause
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $unpause_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	unpause_internal
.type	unpause_internal, @function
CALL $unpause_internal_macro$

.macro unpause_internal_macro
; modifier onlyOwner
;; get member sender
GETGLOB 9
PUSHSLICE x4f776e61626c653a206e6f74206f776e6572
NEWC
STSLICE
ENDC
;; push identifier owner
GETGLOB 10
;; push identifier addr
PUSH S2
SDEQ
THROWARGIFNOT 123
; modifier whenPaused
PUSHSLICE x5061757361626c653a206e6f7420706175736564
NEWC
STSLICE
ENDC
;; push identifier paused
GETGLOB 11
THROWARGIFNOT 101
; function unpause
; expValue
; end expValue
FALSE
; colValue
SETGLOB 11
; end colValue
;; emit Unpause
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x11d865d4
ENDC
PUSHINT 0
SENDRAWMSG
; end function unpause
; end modifier whenPaused
DROP
; end modifier onlyOwner

.globl	_transferOwnership_internal
.type	_transferOwnership_internal, @function
CALL $_transferOwnership_internal_macro$

.macro _transferOwnership_internal_macro
;; param: owner_
; function _transferOwnership
; expValue
; end expValue
;; push identifier owner_
DUP
; colValue
SETGLOB 10
; end colValue
; end function _transferOwnership
DROP

.macro transferOwnership
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode owner_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: owner_
; modifier onlyOwner
;; get member sender
GETGLOB 9
PUSHSLICE x4f776e61626c653a206e6f74206f776e6572
NEWC
STSLICE
ENDC
;; push identifier owner
GETGLOB 10
;; push identifier addr
PUSH S2
SDEQ
THROWARGIFNOT 123
; function transferOwnership
;; push identifier owner_
PUSH S1
CALLREF {
	CALL $_transferOwnership_internal_macro$
}
; end function transferOwnership
DROP
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro renounceOwnership
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; modifier onlyOwner
;; get member sender
GETGLOB 9
PUSHSLICE x4f776e61626c653a206e6f74206f776e6572
NEWC
STSLICE
ENDC
;; push identifier owner
GETGLOB 10
;; push identifier addr
PUSH S2
SDEQ
THROWARGIFNOT 123
; function renounceOwnership
;; address.makeAddrStd()
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
CALLREF {
	CALL $_transferOwnership_internal_macro$
}
; end function renounceOwnership
DROP
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
REVERSE 5, 0
STSLICE
STI 1
STU 256
STDICT
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDMSGADDR
LDI 1
LDU 256
PLDDICT
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDMSGADDR
	LDI 1
	LDU 256
	PLDDICT
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; init paused
	PUSHINT 0
	SETGLOB 11
	; init _randomNonce
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 12
	; init tunnels
	NEWDICT
	SETGLOB 13
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: paused
	FALSE
	SETGLOB 11
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.macro owner
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xdf0bcfde
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro paused
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xb08d66d1
PUSH S1
STIR 1
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 327451255
LEQ
PUSHCONT {
	DUP
	PUSHINT 110887440
	EQUAL
	IFJMPREF {
		CALL $__getTunnels$
	}
	DUP
	PUSHINT 235197086
	EQUAL
	IFJMPREF {
		CALL $transferOwnership$
	}
	DUP
	PUSHINT 327451255
	EQUAL
	IFJMPREF {
		CALL $__updateTunnel$
	}
}
IFJMP
DUP
PUSHINT 1105452580
LEQ
PUSHCONT {
	DUP
	PUSHINT 814573265
	EQUAL
	IFJMPREF {
		CALL $paused$
	}
	DUP
	PUSHINT 840284606
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 1105452580
	EQUAL
	IFJMPREF {
		CALL $pause$
	}
}
IFJMP
DUP
PUSHINT 1916555405
LEQ
PUSHCONT {
	DUP
	PUSHINT 1594609630
	EQUAL
	IFJMPREF {
		CALL $owner$
	}
	DUP
	PUSHINT 1729444094
	EQUAL
	IFJMPREF {
		CALL $renounceOwnership$
	}
	DUP
	PUSHINT 1916555405
	EQUAL
	IFJMPREF {
		CALL $unpause$
	}
}
IFJMP
DUP
PUSHINT 2114348389
EQUAL
IFJMPREF {
	CALL $__removeTunnel$
}
