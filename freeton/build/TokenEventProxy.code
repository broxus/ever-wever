.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode external_owner_pubkey_
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode internal_owner_address_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: external_owner_pubkey_
;; param: internal_owner_address_
; constructor TokenEventProxy
;; push identifier error_wrong_tvm_key
GETGLOB 23
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
GETGLOB 2
;; ==
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
EQUAL
THROWANYIFNOT
;; push identifier error_define_public_key_or_owner_address
GETGLOB 21
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; push identifier external_owner_pubkey_
PUSH S2
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier internal_owner_address_
	PUSH S1
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
}
IF
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; push identifier external_owner_pubkey_
	PUSH S2
	EQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; get member value
		;; push identifier internal_owner_address_
		PUSH S1
		PARSEMSGADDR
		INDEX 3
		PLDU 256
		NEQINT 0
	}
	IF
}
IFNOT
THROWANYIFNOT
ACCEPT
; expValue
; end expValue
;; push identifier external_owner_pubkey_
PUSH S1
; colValue
SETGLOB 12
; end colValue
; expValue
; end expValue
;; push identifier internal_owner_address_
DUP
; colValue
SETGLOB 13
; end colValue
;; get member balance
GETPARAM 7
INDEX 0
; expValue
; end expValue
; colValue
SETGLOB 14
; end colValue
; end constructor TokenEventProxy
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setConfiguration
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode _config
;; decode struct Configuration _config
;; decode Configuration.ethereum_event_code
;; decode TvmCell
LDREF
;; decode Configuration.outdated_token_roots
LDU 32
LDDICT
ROTREV
PAIR
SWAP
;; decode Configuration.ethereum_event_deploy_pubkey
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode Configuration.ethereum_event_configuration_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode Configuration.token_root_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode Configuration.root_tunnel
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode Configuration.settings_burn_min_msg_value
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
;; decode Configuration.settings_deploy_wallet_grams
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
;; build struct Configuration ss:9
BLKSWAP 8, 1
TUPLE 8
SWAP
ENDS
;; param: _config
CALLREF {
	CALL $setConfiguration_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setConfiguration_internal
.type	setConfiguration_internal, @function
CALL $setConfiguration_internal_macro$

.macro setConfiguration_internal_macro
;; param: _config
; modifier onlyOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 17
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isOwner
;; return
; function isInternalOwner
;; return
;; get member value
;; push identifier internal_owner_address
GETGLOB 13
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier internal_owner_address
	GETGLOB 13
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	; function isExternalOwner
	;; return
	;; push identifier external_owner_pubkey
	GETGLOB 12
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier external_owner_pubkey
		GETGLOB 12
		;; ==
		GETGLOB 5
		DUP
		ISNULL
		PUSHCONT {
			DROP
			PUSHINT 0
		}
		IF
		EQUAL
	}
	IF
	; end function isExternalOwner
}
IFNOT
; end function isOwner
THROWANYIFNOT
; function setConfiguration
; expValue
; end expValue
;; push identifier _config
DUP
; colValue
SETGLOB 11
; end colValue
; end function setConfiguration
; end modifier onlyOwner
DROP

.macro broxusBridgeCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode eventData
;; decode struct EthereumEventInitData eventData
;; decode EthereumEventInitData.eventTransaction
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode EthereumEventInitData.eventIndex
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
;; decode EthereumEventInitData.eventData
;; decode TvmCell
DUP
SREFS
EQINT 1
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
;; decode EthereumEventInitData.eventBlockNumber
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
;; decode EthereumEventInitData.eventBlock
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode EthereumEventInitData.ethereumEventConfiguration
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode EthereumEventInitData.requiredConfirmations
LDUQ 16
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 16
}
IFNOT
;; decode EthereumEventInitData.requiredRejects
LDUQ 16
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 16
}
IFNOT
;; decode EthereumEventInitData.proxyAddress
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode EthereumEventInitData.configurationMeta
;; decode TvmCell
DUP
SBITREFS
EQINT 1
SWAP
EQINT 0
AND
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
;; build struct EthereumEventInitData ss:11
BLKSWAP 10, 1
TUPLE 10
SWAP
; Decode gasBackAddress
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: eventData
;; param: gasBackAddress
CALLREF {
	CALL $broxusBridgeCallback_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	broxusBridgeCallback_internal
.type	broxusBridgeCallback_internal, @function
CALL $broxusBridgeCallback_internal_macro$

.macro broxusBridgeCallback_internal_macro
;; param: eventData
;; param: gasBackAddress
; function broxusBridgeCallback
;; push identifier error_paused
GETGLOB 22
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; !
;; push identifier paused
GETGLOB 16
NOT
THROWANYIFNOT
;; push identifier eventData
PUSH S1
CALLREF {
	CALL $getExpectedEventAddress_internal_macro$
}
;; decl: expectedSenderAddress
;; push identifier error_message_sender_is_not_valid_event
GETGLOB 19
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; push identifier expectedSenderAddress
PUSH S1
;; get member sender
GETGLOB 9
SDEQ
THROWANYIFNOT
;; get member ethereumEventConfiguration
;; push identifier eventData
PUSH S2
INDEX 5
;; get member ethereum_event_configuration_address
;; push identifier config
GETGLOB 11
INDEX 3
SDEQ
THROWIFNOT 100
;; get member proxyAddress
;; push identifier eventData
PUSH S2
INDEX 8
MYADDR
SDEQ
THROWIFNOT 100
;; get member value
;; get member token_root_address
;; push identifier config
GETGLOB 11
INDEX 4
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
THROWIFNOT 100
;; push identifier start_gas_balance
GETGLOB 14
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
MAX
PUSHINT 2
RAWRESERVE
;; get member eventData
;; push identifier eventData
PUSH S2
INDEX 2
CTOS
LDU 128
LDI 8
LDU 256
LDU 256
; colValue
DROP
BLKSWAP 3, 1
BLKSWAP 3, 1
BLKSWAP 3, 1
BLKSWAP 3, 1
;; decl: tokens
;; decl: wid
;; decl: owner_addr
;; decl: owner_pubkey
;; address.makeAddrStd()
;; push identifier owner_addr
PUSH S1
;; push identifier wid
PUSH S3
NEWC
STSLICECONST x9_
STI 8
STU 256
ENDC
CTOS
;; decl: owner_address
;; push identifier error_message_not_valid_payload
GETGLOB 20
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; push identifier tokens
PUSH S5
GTINT 0
THROWANYIFNOT
;; push identifier error_message_not_valid_payload
GETGLOB 20
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; push identifier owner_pubkey
PUSH S2
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier owner_address
	PUSH S1
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
}
IF
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; push identifier owner_pubkey
	PUSH S2
	EQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; get member value
		;; push identifier owner_address
		PUSH S1
		PARSEMSGADDR
		INDEX 3
		PLDU 256
		NEQINT 0
	}
	IF
}
IFNOT
THROWANYIFNOT
;; Remote call IRootTokenContract.deployWallet
;; get member root_tunnel
;; push identifier config
GETGLOB 11
INDEX 5
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x66211c6f
;; tokens
;; push identifier tokens
PUSH S6
STUR 128
;; deploy_grams
;; get member settings_deploy_wallet_grams
;; push identifier config
GETGLOB 11
INDEX 7
STUR 128
;; wallet_public_key
;; push identifier owner_pubkey
PUSH S3
STUR 256
;; owner_address
;; push identifier owner_address
PUSH S2
STSLICER
NEWC
;; gas_back_address
;; push identifier gasBackAddress
PUSH S9
STSLICER
STBREFR
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
BLKDROP 6
; end function broxusBridgeCallback
DROP2

.macro burnCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode tokens
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode payload
;; decode TvmCell
DUP
SBITREFS
EQINT 1
SWAP
EQINT 0
AND
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
; Decode sender_public_key
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode sender_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode 
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: tokens
;; param: payload
;; param: sender_public_key
;; param: sender_address
;; param: 
;; param: send_gas_to
; function burnCallback
;; push identifier start_gas_balance
GETGLOB 14
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
MAX
PUSHINT 2
RAWRESERVE
;; if
;; get member token_root_address
;; push identifier config
GETGLOB 11
INDEX 4
;; get member sender
GETGLOB 9
SDEQ
PUSHCONT {
	;; push identifier tokens
	PUSH S5
	; expValue
	;; fetch burned_count
	GETGLOB 15
	; end expValue
	SWAP
	ADD
	UFITS 128
	; colValue
	SETGLOB 15
	; end colValue
	;; push identifier payload
	PUSH S4
	CTOS
	LDU 160
	; colValue
	DROP
	;; decl: ethereum_address
	;; emit TokenBurn
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x67ce8b37
	;; wid
	;; get member wid
	;; push identifier sender_address
	PUSH S4
	PARSEMSGADDR
	INDEX 2
	STIR 8
	;; addr
	;; get member value
	;; push identifier sender_address
	PUSH S4
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	STUR 256
	;; tokens
	;; push identifier tokens
	PUSH S7
	STUR 128
	;; ethereum_address
	;; push identifier ethereum_address
	PUSH S1
	STUR 160
	ENDC
	PUSHINT 0
	SENDRAWMSG
	;; transfer()
	;; push identifier send_gas_to
	PUSH S1
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 128
	SENDRAWMSG
	DROP
}
PUSHCONT {
	FALSE
	;; decl: is_outdated_tokens
	; for
	PUSHINT 0
	;; decl: i
	PUSHCONT {
		;; push identifier i
		DUP
		;; <
		;; get member length
		;; get member outdated_token_roots
		;; push identifier config
		GETGLOB 11
		INDEX 1
		INDEX 0
		LESS
	}
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier is_outdated_tokens
		PUSH S1
		;; short-circuiting ||
		DUP
		PUSHCONT {
			DROP
			;; index
			;; push identifier i
			DUP
			;; get member outdated_token_roots
			;; push identifier config
			GETGLOB 11
			INDEX 1
			INDEX 1
			PUSHINT 32
			DICTUGET
			THROWIFNOT 50
			;; get member sender
			GETGLOB 9
			SDEQ
		}
		IFNOT
		; colValue
		POP S2
		; end colValue
		;; ++
		; expValue
		; end expValue
		INC
		; colValue
		; end colValue
	}
	WHILE
	DROP
	; end for
	;; if
	;; push identifier is_outdated_tokens
	DUP
	PUSHCONT {
		;; Remote call IRootTokenContract.deployWallet
		;; get member token_root_address
		;; push identifier config
		GETGLOB 11
		INDEX 4
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 1
		NEWC
		STSLICECONST x66211c6f
		;; tokens
		;; push identifier tokens
		PUSH S8
		STUR 128
		;; deploy_grams
		;; get member settings_deploy_wallet_grams
		;; push identifier config
		GETGLOB 11
		INDEX 7
		STUR 128
		;; wallet_public_key
		;; push identifier sender_public_key
		PUSH S6
		STUR 256
		;; owner_address
		;; push identifier sender_address
		PUSH S5
		STSLICER
		NEWC
		;; gas_back_address
		;; push identifier send_gas_to
		PUSH S4
		STSLICER
		STBREFR
		STBREFR
		ENDC
		PUSHINT 128
		SENDRAWMSG
	}
	PUSHCONT {
		;; transfer()
		;; push identifier send_gas_to
		PUSH S1
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 0
		ENDC
		PUSHINT 128
		SENDRAWMSG
	}
	IFELSE
	;; end if
	DROP
}
IFELSE
;; end if
; end function burnCallback
BLKDROP 6
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro withdrawExtraGasFromTokenRoot
DROP
; Decode input parameters
; Decode root
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: root
;; param: to
; modifier onlyOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 17
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isOwner
;; return
; function isInternalOwner
;; return
;; get member value
;; push identifier internal_owner_address
GETGLOB 13
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier internal_owner_address
	GETGLOB 13
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	; function isExternalOwner
	;; return
	;; push identifier external_owner_pubkey
	GETGLOB 12
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier external_owner_pubkey
		GETGLOB 12
		;; ==
		GETGLOB 5
		DUP
		ISNULL
		PUSHCONT {
			DROP
			PUSHINT 0
		}
		IF
		EQUAL
	}
	IF
	; end function isExternalOwner
}
IFNOT
; end function isOwner
THROWANYIFNOT
; function withdrawExtraGasFromTokenRoot
ACCEPT
;; Remote call ISendSurplusGas.sendSurplusGas
;; push identifier root
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x20ebc76d
;; to
;; push identifier to
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function withdrawExtraGasFromTokenRoot
; end modifier onlyOwner
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setPaused
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode value
LDI 1
ENDS
;; param: value
; modifier onlyOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 17
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isOwner
;; return
; function isInternalOwner
;; return
;; get member value
;; push identifier internal_owner_address
GETGLOB 13
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier internal_owner_address
	GETGLOB 13
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	; function isExternalOwner
	;; return
	;; push identifier external_owner_pubkey
	GETGLOB 12
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier external_owner_pubkey
		GETGLOB 12
		;; ==
		GETGLOB 5
		DUP
		ISNULL
		PUSHCONT {
			DROP
			PUSHINT 0
		}
		IF
		EQUAL
	}
	IF
	; end function isExternalOwner
}
IFNOT
; end function isOwner
THROWANYIFNOT
; function setPaused
ACCEPT
; expValue
; end expValue
;; push identifier value
DUP
; colValue
SETGLOB 16
; end colValue
;; Remote call IPausable.setPaused
;; get member root_tunnel
;; push identifier config
GETGLOB 11
INDEX 5
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0d5afc72
;; value
;; push identifier paused
GETGLOB 16
STIR 1
ENDC
PUSHINT 0
SENDRAWMSG
; end function setPaused
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro sendPausedCallbackTo
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode callback_id
LDU 64
; Decode callback_addr
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: callback_id
;; param: callback_addr
; function sendPausedCallbackTo
;; push identifier start_gas_balance
GETGLOB 14
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
MAX
PUSHINT 2
RAWRESERVE
;; Remote call IPausedCallback.pausedCallback
;; push identifier callback_addr
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x7386f0e8
;; callback_id
;; push identifier callback_id
PUSH S2
STUR 64
;; value
;; push identifier paused
GETGLOB 16
STIR 1
ENDC
PUSHINT 128
SENDRAWMSG
; end function sendPausedCallbackTo
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro transferOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode external_owner_pubkey_
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode internal_owner_address_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: external_owner_pubkey_
;; param: internal_owner_address_
; modifier onlyOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 17
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isOwner
;; return
; function isInternalOwner
;; return
;; get member value
;; push identifier internal_owner_address
GETGLOB 13
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier internal_owner_address
	GETGLOB 13
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	; function isExternalOwner
	;; return
	;; push identifier external_owner_pubkey
	GETGLOB 12
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier external_owner_pubkey
		GETGLOB 12
		;; ==
		GETGLOB 5
		DUP
		ISNULL
		PUSHCONT {
			DROP
			PUSHINT 0
		}
		IF
		EQUAL
	}
	IF
	; end function isExternalOwner
}
IFNOT
; end function isOwner
THROWANYIFNOT
; function transferOwner
;; push identifier error_define_public_key_or_owner_address
GETGLOB 21
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; push identifier external_owner_pubkey_
PUSH S2
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier internal_owner_address_
	PUSH S1
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
}
IF
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; push identifier external_owner_pubkey_
	PUSH S2
	EQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; get member value
		;; push identifier internal_owner_address_
		PUSH S1
		PARSEMSGADDR
		INDEX 3
		PLDU 256
		NEQINT 0
	}
	IF
}
IFNOT
THROWANYIFNOT
ACCEPT
; expValue
; end expValue
;; push identifier external_owner_pubkey_
PUSH S1
; colValue
SETGLOB 12
; end colValue
; expValue
; end expValue
;; push identifier internal_owner_address_
DUP
; colValue
SETGLOB 13
; end colValue
; end function transferOwner
; end modifier onlyOwner
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro transferOwnership
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode target
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode external_owner_pubkey_
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode internal_owner_address_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: target
;; param: external_owner_pubkey_
;; param: internal_owner_address_
; modifier onlyOwner
;; push identifier error_message_sender_is_not_my_owner
GETGLOB 17
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
; function isOwner
;; return
; function isInternalOwner
;; return
;; get member value
;; push identifier internal_owner_address
GETGLOB 13
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier internal_owner_address
	GETGLOB 13
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	; function isExternalOwner
	;; return
	;; push identifier external_owner_pubkey
	GETGLOB 12
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier external_owner_pubkey
		GETGLOB 12
		;; ==
		GETGLOB 5
		DUP
		ISNULL
		PUSHCONT {
			DROP
			PUSHINT 0
		}
		IF
		EQUAL
	}
	IF
	; end function isExternalOwner
}
IFNOT
; end function isOwner
THROWANYIFNOT
; function transferOwnership
;; push identifier error_define_public_key_or_owner_address
GETGLOB 21
DUP
LESSINT 2
PUSHCONT {
	DROP
	PUSHINT 100
}
IF
;; push identifier external_owner_pubkey_
PUSH S2
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier internal_owner_address_
	PUSH S1
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
}
IF
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; push identifier external_owner_pubkey_
	PUSH S2
	EQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; get member value
		;; push identifier internal_owner_address_
		PUSH S1
		PARSEMSGADDR
		INDEX 3
		PLDU 256
		NEQINT 0
	}
	IF
}
IFNOT
THROWANYIFNOT
ACCEPT
;; Remote call ITransferOwner.transferOwner
;; push identifier target
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x3828261a
;; external_owner_pubkey_
;; push identifier external_owner_pubkey_
PUSH S3
STUR 256
;; internal_owner_address_
;; push identifier internal_owner_address_
PUSH S2
STSLICER
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function transferOwnership
; end modifier onlyOwner
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro token_root_address
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; function token_root_address
;; return
;; get member token_root_address
;; push identifier config
GETGLOB 11
INDEX 4
; end function token_root_address
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xedf12b93
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getExpectedEventAddress
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode initData
;; decode struct EthereumEventInitData initData
;; decode EthereumEventInitData.eventTransaction
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode EthereumEventInitData.eventIndex
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
;; decode EthereumEventInitData.eventData
;; decode TvmCell
DUP
SREFS
EQINT 1
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
;; decode EthereumEventInitData.eventBlockNumber
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
;; decode EthereumEventInitData.eventBlock
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; decode EthereumEventInitData.ethereumEventConfiguration
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode EthereumEventInitData.requiredConfirmations
LDUQ 16
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 16
}
IFNOT
;; decode EthereumEventInitData.requiredRejects
LDUQ 16
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 16
}
IFNOT
;; decode EthereumEventInitData.proxyAddress
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
;; decode EthereumEventInitData.configurationMeta
;; decode TvmCell
LDREF
;; build struct EthereumEventInitData ss:11
BLKSWAP 10, 1
TUPLE 10
SWAP
ENDS
;; param: initData
CALLREF {
	CALL $getExpectedEventAddress_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x8ae55ddc
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getExpectedEventAddress_internal
.type	getExpectedEventAddress_internal, @function
CALL $getExpectedEventAddress_internal_macro$

.macro getExpectedEventAddress_internal_macro
;; param: initData
; function getExpectedEventAddress
NEWDICT
;; get member ethereum_event_deploy_pubkey
;; push identifier config
GETGLOB 11
INDEX 2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
;; push identifier initData
PUSH S1
UNTUPLE 10
NEWC
NEWC
PUSH S3
STSLICER
PUSH S2
STREFR
STBREFR
PUSH S10
STUR 256
PUSH S9
STUR 32
PUSH S8
STREFR
PUSH S7
STUR 32
PUSH S6
STUR 256
PUSH S5
STSLICER
PUSH S4
STUR 16
PUSH S3
STUR 16
BLKDROP2 10, 1
ENDC
PUSHINT 2
ROT
PUSHINT 64
DICTUSETREF
NEWC
STDICT
ENDC
;; get member ethereum_event_code
;; push identifier config
GETGLOB 11
INDEX 0
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NIP
; end function getExpectedEventAddress
NIP

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 13
GETGLOB 15
XCHG s2
STSLICE
STU 128
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 14
GETGLOB 16
GETGLOB 17
GETGLOB 18
GETGLOB 19
GETGLOB 20
GETGLOB 21
GETGLOB 22
GETGLOB 23
REVERSE 14, 0
STBREF
STU 256
SWAP
UNTUPLE 8
NEWC
NEWC
PUSH S4
STSLICER
PUSH S3
STUR 128
PUSH S2
STUR 128
STBREFR
PUSH S8
STREFR
PUSH S7
UNPAIR
ROTREV
STUR 32
STDICT
PUSH S6
STUR 256
PUSH S5
STSLICER
PUSH S4
STSLICER
BLKDROP2 8, 1
STBREFR
STU 256
STU 128
STI 1
STU 8
STU 8
STU 8
STU 8
STU 8
STU 8
STU 8
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
PLDU 128
SETGLOB 15
SETGLOB 13
LDU 256
LDREFRTOS
LDREF
LDREF
LDU 32
LDDICT
ROTREV
PAIR
SWAP
LDU 256
LDMSGADDR
BLKSWAP 1, 5
CTOS
LDMSGADDR
LDU 128
PLDU 128
TUPLE 8
SETGLOB 11
LDU 256
LDU 128
LDI 1
LDU 8
LDU 8
LDU 8
LDU 8
LDU 8
LDU 8
PLDU 8
SETGLOB 23
SETGLOB 22
SETGLOB 21
SETGLOB 20
SETGLOB 19
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 14
SETGLOB 12
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	PLDU 128
	SETGLOB 15
	SETGLOB 13
	LDU 256
	LDREFRTOS
	LDREF
	LDREF
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	LDU 256
	LDMSGADDR
	BLKSWAP 1, 5
	CTOS
	LDMSGADDR
	LDU 128
	PLDU 128
	TUPLE 8
	SETGLOB 11
	LDU 256
	LDU 128
	LDI 1
	LDU 8
	LDU 8
	LDU 8
	LDU 8
	LDU 8
	LDU 8
	PLDU 8
	SETGLOB 23
	SETGLOB 22
	SETGLOB 21
	SETGLOB 20
	SETGLOB 19
	SETGLOB 18
	SETGLOB 17
	SETGLOB 16
	SETGLOB 14
	SETGLOB 12
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init _randomNonce
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 10
	; init config
	NEWC
	ENDC
	PUSHINT 0
	NEWDICT
	PAIR
	PUSHINT 0
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	PUSHINT 0
	TUPLE 8
	SETGLOB 11
	; init external_owner_pubkey
	PUSHINT 0
	SETGLOB 12
	; init internal_owner_address
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 13
	; init start_gas_balance
	PUSHINT 0
	SETGLOB 14
	; init burned_count
	PUSHINT 0
	SETGLOB 15
	; init paused
	PUSHINT 0
	SETGLOB 16
	; init error_message_sender_is_not_my_owner
	PUSHINT 0
	SETGLOB 17
	; init error_message_sender_is_not_my_root
	PUSHINT 0
	SETGLOB 18
	; init error_message_sender_is_not_valid_event
	PUSHINT 0
	SETGLOB 19
	; init error_message_not_valid_payload
	PUSHINT 0
	SETGLOB 20
	; init error_define_public_key_or_owner_address
	PUSHINT 0
	SETGLOB 21
	; init error_paused
	PUSHINT 0
	SETGLOB 22
	; init error_wrong_tvm_key
	PUSHINT 0
	SETGLOB 23
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: paused
	FALSE
	SETGLOB 16
	;; init state var: error_message_sender_is_not_my_owner
	PUSHINT 100
	SETGLOB 17
	;; init state var: error_message_sender_is_not_my_root
	PUSHINT 102
	SETGLOB 18
	;; init state var: error_message_sender_is_not_valid_event
	PUSHINT 103
	SETGLOB 19
	;; init state var: error_message_not_valid_payload
	PUSHINT 104
	SETGLOB 20
	;; init state var: error_define_public_key_or_owner_address
	PUSHINT 106
	SETGLOB 21
	;; init state var: error_paused
	PUSHINT 107
	SETGLOB 22
	;; init state var: error_wrong_tvm_key
	PUSHINT 108
	SETGLOB 23
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro config
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 11
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x80098470
	PUSH S2
	UNTUPLE 8
	BLKSWAP 1, 8
	PUSH S8
	STREFR
	PUSH S7
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S6
	STUR 256
	PUSH S5
	STSLICER
	PUSH S4
	STSLICER
	NEWC
	PUSH S4
	STSLICER
	PUSH S3
	STUR 128
	PUSH S2
	STUR 128
	BLKDROP2 8, 2
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro external_owner_pubkey
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 12
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xcdf1df2f
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro internal_owner_address
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 13
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xa98bad2a
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro start_gas_balance
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 14
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf26e937f
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro burned_count
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 15
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf481fc8d
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro paused
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 16
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xb08d66d1
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 224066674
LEQ
PUSHCONT {
	DUP
	PUSHINT 30752029
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 623728
		EQUAL
		IFJMPREF {
			CALL $config$
		}
		DUP
		PUSHINT 30752029
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
	}
	IFJMP
	DUP
	PUSHINT 182803932
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 32840294
		EQUAL
		IFJMPREF {
			CALL $sendPausedCallbackTo$
		}
		DUP
		PUSHINT 182803932
		EQUAL
		IFJMPREF {
			CALL $getExpectedEventAddress$
		}
	}
	IFJMP
	DUP
	PUSHINT 224066674
	EQUAL
	IFJMPREF {
		CALL $setPaused$
	}
}
IFJMP
DUP
PUSHINT 942155290
LEQ
PUSHCONT {
	DUP
	PUSHINT 697019690
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 487964377
		EQUAL
		IFJMPREF {
			CALL $withdrawExtraGasFromTokenRoot$
		}
		DUP
		PUSHINT 697019690
		EQUAL
		IFJMPREF {
			CALL $internal_owner_address$
		}
	}
	IFJMP
	DUP
	PUSHINT 814573265
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 738426590
		EQUAL
		IFJMPREF {
			CALL $setConfiguration$
		}
		DUP
		PUSHINT 814573265
		EQUAL
		IFJMPREF {
			CALL $paused$
		}
	}
	IFJMP
	DUP
	PUSHINT 942155290
	EQUAL
	IFJMPREF {
		CALL $transferOwner$
	}
}
IFJMP
DUP
PUSHINT 1844521875
LEQ
PUSHCONT {
	DUP
	PUSHINT 1214893325
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1019809854
		EQUAL
		IFJMPREF {
			CALL $burnCallback$
		}
		DUP
		PUSHINT 1214893325
		EQUAL
		IFJMPREF {
			CALL $broxusBridgeCallback$
		}
	}
	IFJMP
	DUP
	PUSHINT 1307696943
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1230081952
		EQUAL
		IFJMPREF {
			CALL $transferOwnership$
		}
		DUP
		PUSHINT 1307696943
		EQUAL
		IFJMPREF {
			CALL $external_owner_pubkey$
		}
	}
	IFJMP
	DUP
	PUSHINT 1844521875
	EQUAL
	IFJMPREF {
		CALL $token_root_address$
	}
}
IFJMP
DUP
PUSHINT 1954675853
LEQ
PUSHCONT {
	DUP
	PUSHINT 1919849343
	EQUAL
	IFJMPREF {
		CALL $start_gas_balance$
	}
	DUP
	PUSHINT 1954675853
	EQUAL
	IFJMPREF {
		CALL $burned_count$
	}
}
IFJMP
